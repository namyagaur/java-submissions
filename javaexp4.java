import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// --- JDBC Configuration (Update these!) ---
class DbConfig {
    static final String DB_URL = "jdbc:mysql://localhost:3306/university_db";
    static final String USER = "root";       // Your MySQL username
    static final String PASS = "password";   // Your MySQL password
}


// ====================================================================
// 1. MODEL: Student Class (Data Structure)
// ====================================================================
/**
 * The Model represents the data structure (POJO) used throughout the application.
 */
class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    // Constructor for creating new students (ID generated by DB)
    public Student(String name, String department, double marks) {
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    // Constructor for retrieving existing students from DB
    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    // Getters and Setters
    public int getStudentID() { return studentID; }
    public String getName() { return name; }
    public String getDepartment() { return department; }
    public double getMarks() { return marks; }

    public void setName(String name) { this.name = name; }
    public void setDepartment(String department) { this.department = department; }
    public void setMarks(double marks) { this.marks = marks; }

    @Override
    public String toString() {
        return String.format("ID: %-5d | Name: %-20s | Dept: %-15s | Marks: %5.2f%%", 
            studentID, name, department, marks);
    }
}


// ====================================================================
// 2. CONTROLLER: StudentController Class (Database Logic)
// ====================================================================
/**
 * The Controller handles all business logic, primarily JDBC operations 
 * (CRUD) and managing the database connection.
 */
class StudentController {
    private Connection connection;

    public StudentController() {
        try {
            // Attempt to establish the connection immediately upon instantiation
            this.connection = DriverManager.getConnection(DbConfig.DB_URL, DbConfig.USER, DbConfig.PASS);
            // Default: Auto-commit is enabled. Each statement is a transaction.
            System.out.println("Controller: Database connection successful.");
            
            // Optional: Ensure the table exists (Schema setup for a cleaner demo)
            initializeTable();
            
        } catch (SQLException e) {
            System.err.println("Controller: Error connecting to database.");
            System.err.println("Message: " + e.getMessage());
            this.connection = null; // Set to null if connection failed
        }
    }

    /**
     * Creates the Student table if it doesn't exist.
     */
    private void initializeTable() throws SQLException {
        String sql = "CREATE TABLE IF NOT EXISTS Student (" +
                     "StudentID INT PRIMARY KEY AUTO_INCREMENT, " +
                     "Name VARCHAR(255) NOT NULL, " +
                     "Department VARCHAR(100) NOT NULL, " +
                     "Marks DECIMAL(5, 2) NOT NULL)";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.executeUpdate();
            // System.out.println("Controller: Student table initialized.");
        }
    }

    /**
     * C - Create: Inserts a new Student record into the database.
     */
    public boolean addStudent(Student student) {
        String sql = "INSERT INTO Student (Name, Department, Marks) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setDouble(3, student.getMarks());
            
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Controller Error (Add): " + e.getMessage());
            return false;
        }
    }

    /**
     * R - Read: Retrieves all Student records from the database.
     */
    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT StudentID, Name, Department, Marks FROM Student ORDER BY StudentID";
        
        try (
            PreparedStatement pstmt = connection.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery()
        ) {
            while (rs.next()) {
                int id = rs.getInt("StudentID");
                String name = rs.getString("Name");
                String dept = rs.getString("Department");
                double marks = rs.getDouble("Marks");
                
                students.add(new Student(id, name, dept, marks));
            }
        } catch (SQLException e) {
            System.err.println("Controller Error (Read): " + e.getMessage());
        }
        return students;
    }

    /**
     * U - Update: Modifies an existing Student record.
     */
    public boolean updateStudent(int id, String name, String department, double marks) {
        String sql = "UPDATE Student SET Name = ?, Department = ?, Marks = ? WHERE StudentID = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, name);
            pstmt.setString(2, department);
            pstmt.setDouble(3, marks);
            pstmt.setInt(4, id);
            
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Controller Error (Update): " + e.getMessage());
            return false;
        }
    }

    /**
     * D - Delete: Removes a Student record by ID.
     */
    public boolean deleteStudent(int id) {
        String sql = "DELETE FROM Student WHERE StudentID = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, id);
            
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Controller Error (Delete): " + e.getMessage());
            return false;
        }
    }

    /**
     * Closes the database connection when the application shuts down.
     */
    public void close() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                System.out.println("Controller: Database connection closed.");
            }
        } catch (SQLException e) {
            System.err.println("Controller Error (Close): " + e.getMessage());
        }
    }
}


// ====================================================================
// 3. VIEW/MAIN: StudentApp Class (User Interface)
// ====================================================================
/**
 * The View/Main class handles user input, displays the menu, and invokes 
 * the appropriate methods in the StudentController.
 */
public class Main{
    private static final Scanner scanner = new Scanner(System.in);
    private static StudentController controller;

    public static void main(String[] args) {
        // Initialize the Controller, which attempts to establish the DB connection
        controller = new StudentController();

        if (controller.connection == null) {
            System.err.println("Application cannot run without a database connection.");
            return;
        }

        int choice = 0;
        try {
            while (choice != 5) {
                displayMenu();
                if (scanner.hasNextInt()) {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                } else {
                    System.out.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume bad input
                    continue;
                }
                
                switch (choice) {
                    case 1: addStudentView(); break;
                    case 2: viewAllStudentsView(); break;
                    case 3: updateStudentView(); break;
                    case 4: deleteStudentView(); break;
                    case 5: System.out.println("Exiting application. Goodbye!"); break;
                    default: System.out.println("Invalid choice. Please enter 1-5.");
                }
            }
        } finally {
            controller.close(); // Ensure connection is closed on exit
            scanner.close();
        }
    }

    private static void displayMenu() {
        System.out.println("\n=================================================");
        System.out.println("     University Student Management (MVC)");
        System.out.println("=================================================");
        System.out.println("1. Add New Student");
        System.out.println("2. View All Students");
        System.out.println("3. Update Student Details");
        System.out.println("4. Delete Student Record");
        System.out.println("5. Exit");
        System.out.print("Enter choice: ");
    }

    private static void addStudentView() {
        System.out.println("\n--- Add New Student ---");
        try {
            System.out.print("Name: ");
            String name = scanner.nextLine();
            System.out.print("Department: ");
            String department = scanner.nextLine();
            System.out.print("Marks (%): ");
            double marks = scanner.nextDouble();
            scanner.nextLine();

            Student newStudent = new Student(name, department, marks);

            if (controller.addStudent(newStudent)) {
                System.out.println("[SUCCESS] Student '" + name + "' added successfully.");
            } else {
                System.out.println("[FAILED] Could not add student.");
            }
        } catch (java.util.InputMismatchException e) {
            System.err.println("[ERROR] Invalid input for Marks. Please enter a number.");
            scanner.nextLine();
        }
    }

    private static void viewAllStudentsView() {
        System.out.println("\n--- All Enrolled Students ---");
        List<Student> students = controller.getAllStudents();

        if (students.isEmpty()) {
            System.out.println("No student records found.");
            return;
        }

        System.out.println("--------------------------------------------------------------------------------");
        for (Student s : students) {
            System.out.println(s);
        }
        System.out.println("--------------------------------------------------------------------------------");
    }

    private static void updateStudentView() {
        System.out.println("\n--- Update Student Details ---");
        try {
            System.out.print("Enter Student ID to update: ");
            int id = scanner.nextInt();
            scanner.nextLine();

            System.out.print("Enter New Name: ");
            String name = scanner.nextLine();
            System.out.print("Enter New Department: ");
            String department = scanner.nextLine();
            System.out.print("Enter New Marks (%): ");
            double marks = scanner.nextDouble();
            scanner.nextLine();

            if (controller.updateStudent(id, name, department, marks)) {
                System.out.println("[SUCCESS] Student ID " + id + " updated successfully.");
            } else {
                System.out.println("[FAILED] Could not find or update student ID " + id + ".");
            }
        } catch (java.util.InputMismatchException e) {
            System.err.println("[ERROR] Invalid input for ID or Marks. Please enter numbers.");
            scanner.nextLine();
        }
    }

    private static void deleteStudentView() {
        System.out.println("\n--- Delete Student Record ---");
        try {
            System.out.print("Enter Student ID to delete: ");
            int id = scanner.nextInt();
            scanner.nextLine();

            if (controller.deleteStudent(id)) {
                System.out.println("[SUCCESS] Student ID " + id + " deleted successfully.");
            } else {
                System.out.println("[FAILED] Could not find or delete student ID " + id + ".");
            }
        } catch (java.util.InputMismatchException e) {
            System.err.println("[ERROR] Invalid input for ID. Please enter a number.");
            scanner.nextLine();
        }
    }
}
